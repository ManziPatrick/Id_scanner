{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport { UnavailabilityError } from '@unimodules/core';\nimport { PermissionStatus } from 'expo-modules-core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoBarCodeScannerModule from \"./ExpoBarCodeScannerModule\";\nimport ExpoBarCodeScannerView from \"./ExpoBarCodeScannerView\";\nvar BarCodeType = ExpoBarCodeScannerModule.BarCodeType,\n  Type = ExpoBarCodeScannerModule.Type;\nvar EVENT_THROTTLE_MS = 500;\nexport { PermissionStatus };\nexport var BarCodeScanner = function (_React$Component) {\n  _inherits(BarCodeScanner, _React$Component);\n  var _super = _createSuper(BarCodeScanner);\n  function BarCodeScanner() {\n    var _this;\n    _classCallCheck(this, BarCodeScanner);\n    _this = _super.apply(this, arguments);\n    _this.lastEvents = {};\n    _this.lastEventsTimes = {};\n    _this.onObjectDetected = function (callback) {\n      return function (_ref) {\n        var nativeEvent = _ref.nativeEvent;\n        var type = nativeEvent.type;\n        if (_this.lastEvents[type] && _this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this.lastEvents[type] && Date.now() - _this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {\n          return;\n        }\n        if (callback) {\n          callback(nativeEvent);\n          _this.lastEventsTimes[type] = new Date();\n          _this.lastEvents[type] = JSON.stringify(nativeEvent);\n        }\n      };\n    };\n    return _this;\n  }\n  _createClass(BarCodeScanner, [{\n    key: \"render\",\n    value: function render() {\n      var nativeProps = this.convertNativeProps(this.props);\n      var onBarCodeScanned = this.props.onBarCodeScanned;\n      return React.createElement(ExpoBarCodeScannerView, _extends({}, nativeProps, {\n        onBarCodeScanned: this.onObjectDetected(onBarCodeScanned)\n      }));\n    }\n  }, {\n    key: \"convertNativeProps\",\n    value: function convertNativeProps(props) {\n      var nativeProps = {};\n      for (var _i = 0, _Object$entries = Object.entries(props); _i < _Object$entries.length; _i++) {\n        var _ref2 = _Object$entries[_i];\n        var _ref3 = _slicedToArray(_ref2, 2);\n        var key = _ref3[0];\n        var value = _ref3[1];\n        if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n          nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n        } else {\n          nativeProps[key] = value;\n        }\n      }\n      return nativeProps;\n    }\n  }], [{\n    key: \"getPermissionsAsync\",\n    value: function getPermissionsAsync() {\n      return _regeneratorRuntime.async(function getPermissionsAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", ExpoBarCodeScannerModule.getPermissionsAsync());\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"requestPermissionsAsync\",\n    value: function requestPermissionsAsync() {\n      return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", ExpoBarCodeScannerModule.requestPermissionsAsync());\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"scanFromURLAsync\",\n    value: function scanFromURLAsync(url) {\n      var barCodeTypes,\n        _args3 = arguments;\n      return _regeneratorRuntime.async(function scanFromURLAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              barCodeTypes = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : Object.values(BarCodeType);\n              if (ExpoBarCodeScannerModule.scanFromURLAsync) {\n                _context3.next = 3;\n                break;\n              }\n              throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n            case 3:\n              if (!(Array.isArray(barCodeTypes) && !barCodeTypes.length)) {\n                _context3.next = 5;\n                break;\n              }\n              throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n            case 5:\n              if (!(Platform.OS === 'ios')) {\n                _context3.next = 11;\n                break;\n              }\n              if (!(Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr))) {\n                _context3.next = 8;\n                break;\n              }\n              throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n            case 8:\n              _context3.next = 10;\n              return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]));\n            case 10:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 11:\n              _context3.next = 13;\n              return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes));\n            case 13:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n  return BarCodeScanner;\n}(React.Component);\nBarCodeScanner.Constants = {\n  BarCodeType: BarCodeType,\n  Type: Type\n};\nBarCodeScanner.ConversionTables = {\n  type: Type\n};\nBarCodeScanner.defaultProps = {\n  type: Type.back,\n  barCodeTypes: Object.values(BarCodeType)\n};\nvar Constants = BarCodeScanner.Constants,\n  getPermissionsAsync = BarCodeScanner.getPermissionsAsync,\n  requestPermissionsAsync = BarCodeScanner.requestPermissionsAsync;\nexport { Constants, getPermissionsAsync, requestPermissionsAsync };","map":{"version":3,"names":["UnavailabilityError","PermissionStatus","React","Platform","ExpoBarCodeScannerModule","ExpoBarCodeScannerView","BarCodeType","Type","EVENT_THROTTLE_MS","BarCodeScanner","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","lastEvents","lastEventsTimes","onObjectDetected","callback","_ref","nativeEvent","type","JSON","stringify","Date","now","_createClass","key","value","render","nativeProps","convertNativeProps","props","onBarCodeScanned","createElement","_extends","_i","_Object$entries","Object","entries","length","_ref2","_ref3","_slicedToArray","ConversionTables","getPermissionsAsync","_regeneratorRuntime","async","getPermissionsAsync$","_context","prev","next","abrupt","stop","Promise","requestPermissionsAsync","requestPermissionsAsync$","_context2","scanFromURLAsync","url","barCodeTypes","_args3","arguments","scanFromURLAsync$","_context3","undefined","values","Array","isArray","Error","OS","includes","qr","awrap","sent","Component","Constants","defaultProps","back"],"sources":["C:\\Users\\hp\\Desktop\\peterfile\\Qr-code-reader-react-native-expo-\\node_modules\\expo-barcode-scanner\\src\\BarCodeScanner.tsx"],"sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { PermissionResponse, PermissionStatus } from 'expo-modules-core';\nimport * as React from 'react';\nimport { Platform, ViewProps } from 'react-native';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\nexport type BarCodePoint = {\n  x: number;\n  y: number;\n};\n\nexport type BarCodeSize = {\n  height: number;\n  width: number;\n};\n\nexport type BarCodeBounds = {\n  origin: BarCodePoint;\n  size: BarCodeSize;\n};\n\nexport type BarCodeScannerResult = {\n  type: string;\n  data: string;\n  bounds?: BarCodeBounds;\n  cornerPoints?: BarCodePoint[];\n};\n\nexport type BarCodeEvent = BarCodeScannerResult & {\n  target?: number;\n};\n\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\nexport { PermissionResponse, PermissionStatus };\n\nexport interface BarCodeScannerProps extends ViewProps {\n  type?: 'front' | 'back' | number;\n  barCodeTypes?: string[];\n  onBarCodeScanned?: BarCodeScannedCallback;\n}\n\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<BarCodeScannerResult[]> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  onObjectDetected = (callback?: BarCodeScannedCallback) => ({\n    nativeEvent,\n  }: BarCodeEventCallbackArguments) => {\n    const { type } = nativeEvent;\n    if (\n      this.lastEvents[type] &&\n      this.lastEventsTimes[type] &&\n      JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n      Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n    ) {\n      return;\n    }\n\n    if (callback) {\n      callback(nativeEvent);\n      this.lastEventsTimes[type] = new Date();\n      this.lastEvents[type] = JSON.stringify(nativeEvent);\n    }\n  };\n\n  convertNativeProps(props: BarCodeScannerProps) {\n    const nativeProps: BarCodeScannerProps = {};\n\n    for (const [key, value] of Object.entries(props)) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n      } else {\n        nativeProps[key] = value;\n      }\n    }\n\n    return nativeProps;\n  }\n}\n\nexport const { Constants, getPermissionsAsync, requestPermissionsAsync } = BarCodeScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}