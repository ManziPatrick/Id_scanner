{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _excluded = [\"children\", \"screenListeners\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from \"./Group\";\nimport isArrayEqual from \"./isArrayEqual\";\nimport NavigationHelpersContext from \"./NavigationHelpersContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport Screen from \"./Screen\";\nimport { PrivateValueStore } from \"./types\";\nimport useChildListeners from \"./useChildListeners\";\nimport useComponent from \"./useComponent\";\nimport useCurrentRender from \"./useCurrentRender\";\nimport useDescriptors from \"./useDescriptors\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useFocusedListenersChildrenAdapter from \"./useFocusedListenersChildrenAdapter\";\nimport useFocusEvents from \"./useFocusEvents\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useNavigationHelpers from \"./useNavigationHelpers\";\nimport useOnAction from \"./useOnAction\";\nimport useOnGetState from \"./useOnGetState\";\nimport useOnRouteFocus from \"./useOnRouteFocus\";\nimport useRegisterNavigator from \"./useRegisterNavigator\";\nimport useScheduleUpdate from \"./useScheduleUpdate\";\nPrivateValueStore;\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, options) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        acc.push([options, child.props]);\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === Group) {\n        acc.push.apply(acc, _toConsumableArray(getRouteConfigsFromChildren(child.props.children, child.type !== Group ? options : options != null ? [].concat(_toConsumableArray(options), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$ = config[1],\n        name = _config$.name,\n        children = _config$.children,\n        component = _config$.component,\n        getComponent = _config$.getComponent;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n        if (typeof component === 'function' && component.name === 'component') {\n          console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n  return configs;\n};\nexport default function useNavigationBuilder(createRouter, options) {\n  var navigatorKey = useRegisterNavigator();\n  var route = React.useContext(NavigationRouteContext);\n  var children = options.children,\n    screenListeners = options.screenListeners,\n    rest = _objectWithoutProperties(options, _excluded);\n  var _React$useRef = React.useRef(createRouter(_objectSpread(_objectSpread({}, rest), route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null))),\n    router = _React$useRef.current;\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config[1].name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config[1].name + \"')\");\n    }\n    acc[config[1].name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config[1].name;\n  });\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr][1].initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return _extends(acc, _defineProperty({}, curr, screens[curr][1].getId));\n  }, {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n  var _React$useContext = React.useContext(NavigationStateContext),\n    currentState = _React$useContext.state,\n    getCurrentState = _React$useContext.getState,\n    setCurrentState = _React$useContext.setState,\n    setKey = _React$useContext.setKey,\n    getKey = _React$useContext.getKey,\n    getIsInitial = _React$useContext.getIsInitial;\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n    setCurrentState(state);\n  }, [setCurrentState]);\n  var _React$useMemo = React.useMemo(function () {\n      var _route$params4;\n      var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n        var _route$params, _route$params2, _route$params3;\n        var initialParams = screens[curr][1].initialParams;\n        var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n        acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n        return acc;\n      }, {});\n      if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n        return [router.getInitialState({\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), true];\n      } else {\n        var _route$params$state, _route$params5;\n        return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), false];\n      }\n    }, [currentState, router, isStateValid]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    initializedState = _React$useMemo2[0],\n    isFirstStateInitialization = _React$useMemo2[1];\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    });\n  }\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n  var shouldUpdate = state !== nextState;\n  useScheduleUpdate(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = useEventEmitter(function (e) {\n    var _ref;\n    var routeNames = [];\n    var route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, _toConsumableArray(Object.keys(screens).filter(function (name) {\n        var _route2;\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n    if (route == null) {\n      return;\n    }\n    var navigation = descriptors[route.key].navigation;\n    var listeners = (_ref = []).concat.apply(_ref, _toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function (name) {\n      var listeners = screens[name][1].listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  useFocusEvents({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n  var _useChildListeners = useChildListeners(),\n    childListeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = useKeyedChildListeners(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var onAction = useOnAction({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = useOnRouteFocus({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = useNavigationHelpers({\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = useDescriptors({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  useCurrentRender({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"names":["CommonActions","React","isValidElementType","Group","isArrayEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","getRouteConfigsFromChildren","children","options","configs","Children","toArray","reduce","acc","child","_child$type","_child$props","isValidElement","type","push","props","Fragment","apply","_toConsumableArray","concat","screenOptions","Error","name","JSON","stringify","String","process","env","NODE_ENV","forEach","config","_config$","component","getComponent","undefined","console","warn","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","_objectWithoutProperties","_excluded","_React$useRef","useRef","_objectSpread","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeParamList","curr","initialParams","routeGetIdList","_extends","_defineProperty","getId","length","isStateValid","useCallback","isStateInitialized","stale","_React$useContext","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","_React$useMemo","useMemo","_route$params4","initialRouteParamList","_route$params","_route$params2","_route$params3","initialParamsFromParams","getInitialState","_route$params$state","_route$params5","getRehydratedState","_React$useMemo2","_slicedToArray","initializedState","isFirstStateInitialization","nextState","getStateForRouteNamesChange","previousNestedParamsRef","useEffect","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","_ref","target","_route","routes","find","key","index","Object","keys","filter","_route2","navigation","descriptors","listeners","cb","i","self","lastIndexOf","listener","emit","data","_useChildListeners","childListeners","addListener","_useKeyedChildListene","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","Provider","value"],"sources":["C:\\Users\\hp\\Desktop\\peterfile\\Qr-code-reader-react-native-expo-\\node_modules\\@react-navigation\\native\\node_modules\\@react-navigation\\core\\lib\\module\\useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  options?: ScreenConfigWithParent<State, ScreenOptions, EventMap>[0]\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push([\n          options,\n          child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        ]);\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.type !== Group\n              ? options\n              : options != null\n              ? [...options, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config[1];\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs =\n    getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config[1].name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config[1].name}')`\n      );\n    }\n\n    acc[config[1].name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config[1].name);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr][1];\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr][1].getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr][1];\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name][1];\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"],"mappings":";;;;;;;;AAAA,SACEA,aADF,QAWO,2BAXP;AAYA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,UAAnC;AAEA,OAAOC,KAAP;AACA,OAAOC,YAAP;AACA,OAAOC,wBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,MAAP;AACA,SAKEC,iBALF;AAQA,OAAOC,iBAAP;AACA,OAAOC,YAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,eAAP;AACA,OAAOC,kCAAP;AACA,OAAOC,cAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,OAAOC,eAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,iBAAP;AAIAd,iBAAiB;AAYjB,IAAMe,2BAA2B,GAAG,SAA9BA,2BAA2BA,CAK/BC,QALkC,EAMlCC,OANkC,EAO/B;EACH,IAAMC,OAAO,GAAG1B,KAAK,CAAC2B,QAAN,CAAeC,OAAf,CAAuBJ,QAAvB,EAAiCK,MAAjC,CAEd,UAACC,GAAD,EAAMC,KAAN,EAAgB;IAAA,IAAAC,WAAA,EAAAC,YAAA;IAChB,IAAIjC,KAAK,CAACkC,cAAN,CAAqBH,KAArB,CAAJ,EAAiC;MAC/B,IAAIA,KAAK,CAACI,IAAN,KAAe5B,MAAnB,EAA2B;QAGzBuB,GAAG,CAACM,IAAJ,CAAS,CACPX,OADO,EAEPM,KAAK,CAACM,KAFC,CAAT;QAUA,OAAOP,GAAP;MACD;MAED,IAAIC,KAAK,CAACI,IAAN,KAAenC,KAAK,CAACsC,QAArB,IAAiCP,KAAK,CAACI,IAAN,KAAejC,KAApD,EAA2D;QAGzD4B,GAAG,CAACM,IAAJ,CAAAG,KAAA,CAAAT,GAAG,EAAAU,kBAAA,CACEjB,2BAA2B,CAC5BQ,KAAK,CAACM,KAAN,CAAYb,QADgB,EAE5BO,KAAK,CAACI,IAAN,KAAejC,KAAf,GACIuB,OADJ,GAEIA,OAAO,IAAI,IAAX,MAAAgB,MAAA,CAAAD,kBAAA,CACIf,OAAJ,IAAaM,KAAK,CAACM,KAAN,CAAYK,aAAzB,KACA,CAACX,KAAK,CAACM,KAAN,CAAYK,aAAb,CANwB,CADhC;QAUA,OAAOZ,GAAP;MACD;IACF;IAED,MAAM,IAAIa,KAAJ,wGAEF3C,KAAK,CAACkC,cAAN,CAAqBH,KAArB,WAEM,OAAOA,KAAK,CAACI,IAAb,KAAsB,QAAtB,GAAiCJ,KAAK,CAACI,IAAvC,IAAAH,WAAA,GAA8CD,KAAK,CAACI,IAApD,cAAAH,WAAA,uBAA8CA,WAAA,CAAYY,IAC3D,WACC,CAAAX,YAAA,GAAAF,KAAK,CAACM,KAAN,cAAAJ,YAAA,eAAAA,YAAA,CAAaW,IAAb,yBAAwCb,KAAK,CAACM,KAAN,CAAYO,IAAK,SAAK,EAC/D,IACD,OAAOb,KAAP,KAAiB,QAAjB,GACAc,IAAI,CAACC,SAAL,CAAef,KAAf,CADA,SAEIgB,MAAM,CAAChB,KAAD,CAAQ,MACvB,gGAXG,CAAN;EAaD,CAlDe,EAkDb,EAlDa,CAAhB;EAoDA,IAAIiB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzCxB,OAAO,CAACyB,OAAR,CAAiB,UAAAC,MAAD,EAAY;MAC1B,IAAAC,QAAA,GAAoDD,MAAM,CAAC,CAAD,CAA1D;QAAQR,IAAF,GAAAS,QAAA,CAAET,IAAF;QAAQpB,QAAR,GAAA6B,QAAA,CAAQ7B,QAAR;QAAkB8B,SAAlB,GAAAD,QAAA,CAAkBC,SAAlB;QAA6BC,YAAA,GAAAF,QAAA,CAAAE,YAAA;MAEnC,IAAI,OAAOX,IAAP,KAAgB,QAAhB,IAA4B,CAACA,IAAjC,EAAuC;QACrC,MAAM,IAAID,KAAJ,2BACoBE,IAAI,CAACC,SAAL,CACtBF,IADsB,CAEtB,qDAHE,CAAN;MAKD;MAED,IACEpB,QAAQ,IAAI,IAAZ,IACA8B,SAAS,KAAKE,SADd,IAEAD,YAAY,KAAKC,SAHnB,EAIE;QACA,IAAIhC,QAAQ,IAAI,IAAZ,IAAoB8B,SAAS,KAAKE,SAAtC,EAAiD;UAC/C,MAAM,IAAIb,KAAJ,gEACyDC,IAAK,uCAD9D,CAAN;QAGD;QAED,IAAIpB,QAAQ,IAAI,IAAZ,IAAoB+B,YAAY,KAAKC,SAAzC,EAAoD;UAClD,MAAM,IAAIb,KAAJ,mEAC4DC,IAAK,uCADjE,CAAN;QAGD;QAED,IAAIU,SAAS,KAAKE,SAAd,IAA2BD,YAAY,KAAKC,SAAhD,EAA2D;UACzD,MAAM,IAAIb,KAAJ,oEAC6DC,IAAK,uCADlE,CAAN;QAGD;QAED,IAAIpB,QAAQ,IAAI,IAAZ,IAAoB,OAAOA,QAAP,KAAoB,UAA5C,EAAwD;UACtD,MAAM,IAAImB,KAAJ,+DACwDC,IAAK,wDAD7D,CAAN;QAGD;QAED,IAAIU,SAAS,KAAKE,SAAd,IAA2B,CAACvD,kBAAkB,CAACqD,SAAD,CAAlD,EAA+D;UAC7D,MAAM,IAAIX,KAAJ,gEACyDC,IAAK,2CAD9D,CAAN;QAGD;QAED,IAAIW,YAAY,KAAKC,SAAjB,IAA8B,OAAOD,YAAP,KAAwB,UAA1D,EAAsE;UACpE,MAAM,IAAIZ,KAAJ,mEAC4DC,IAAK,0DADjE,CAAN;QAGD;QAED,IAAI,OAAOU,SAAP,KAAqB,UAArB,IAAmCA,SAAS,CAACV,IAAV,KAAmB,WAA1D,EAAuE;UAIrEa,OAAO,CAACC,IAAR,wFACuFd,IAAK,0RAD5F;QAGD;MACF,CAjDD,MAiDO;QACL,MAAM,IAAID,KAAJ,qFAC8EC,IAAK,wLADnF,CAAN;MAGD;IACF,CAjED;EAkED;EAED,OAAOlB,OAAP;AACD,CAlID;AA2IA,eAAe,SAASiC,oBAATA,CAObC,YAPa,EAQbnC,OARa,EAeb;EACA,IAAMoC,YAAY,GAAGxC,oBAAoB,EAAzC;EAEA,IAAMyC,KAAK,GAAG9D,KAAK,CAAC+D,UAAN,CAAiB1D,sBAAjB,CAAd;EAIA,IAAQmB,QAAF,GAAyCC,OAA/C,CAAQD,QAAF;IAAYwC,eAAZ,GAAyCvC,OAA/C,CAAkBuC,eAAZ;IAAgCC,IAAA,GAAAC,wBAAA,CAASzC,OAA/C,EAAA0C,SAAA;EACA,IAAAC,aAAA,GAA4BpE,KAAK,CAACqE,MAAN,CAC1BT,YAAY,CAAAU,aAAA,CAAAA,aAAA,KACNL,IADO,GAEPH,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAES,MAAP,IACJT,KAAK,CAACS,MAAN,CAAaC,KAAb,IAAsB,IADlB,IAEJV,KAAK,CAACS,MAAN,CAAaE,OAAb,KAAyB,KAFrB,IAGJ,OAAOX,KAAK,CAACS,MAAN,CAAaG,MAApB,KAA+B,QAH3B,GAIA;MAAEC,gBAAgB,EAAEb,KAAK,CAACS,MAAN,CAAaG;IAAjC,CAJA,GAKA,IALJ,CAFU,CADc,CAA5B;IAAiBE,MAAA,GAAAR,aAAA,CAATS,OAAO;EAYf,IAAMC,YAAY,GAChBvD,2BAA2B,CAAiCC,QAAjC,CAD7B;EAGA,IAAMuD,OAAO,GAAGD,YAAY,CAACjD,MAAb,CAEd,UAACC,GAAD,EAAMsB,MAAN,EAAiB;IACjB,IAAIA,MAAM,CAAC,CAAD,CAAN,CAAUR,IAAV,IAAkBd,GAAtB,EAA2B;MACzB,MAAM,IAAIa,KAAJ,gHACyGS,MAAM,CAAC,CAAD,CAAN,CAAUR,IAAK,OADxH,CAAN;IAGD;IAEDd,GAAG,CAACsB,MAAM,CAAC,CAAD,CAAN,CAAUR,IAAX,CAAH,GAAsBQ,MAAtB;IACA,OAAOtB,GAAP;EACD,CAXe,EAWb,EAXa,CAAhB;EAaA,IAAMkD,UAAU,GAAGF,YAAY,CAACG,GAAb,CAAkB,UAAA7B,MAAD;IAAA,OAAYA,MAAM,CAAC,CAAD,CAAN,CAAUR,IAAvC;EAAA,EAAnB;EACA,IAAMsC,cAAc,GAAGF,UAAU,CAACnD,MAAX,CACrB,UAACC,GAAD,EAAMqD,IAAN,EAAe;IACb,IAAQC,aAAA,GAAkBL,OAAO,CAACI,IAAD,CAAP,CAAc,CAAd,CAA1B,CAAQC,aAAA;IACRtD,GAAG,CAACqD,IAAD,CAAH,GAAYC,aAAZ;IACA,OAAOtD,GAAP;EACD,CALoB,EAMrB,EANqB,CAAvB;EAQA,IAAMuD,cAAc,GAAGL,UAAU,CAACnD,MAAX,CAGrB,UAACC,GAAD,EAAMqD,IAAN;IAAA,OACEG,QAAA,CAAcxD,GAAd,EAAAyD,eAAA,KACGJ,IAAD,EAAQJ,OAAO,CAACI,IAAD,CAAP,CAAc,CAAd,EAAiBK,KAAA,CAD3B,CAJmB;EAAA,GAOrB,EAPqB,CAAvB;EAUA,IAAI,CAACR,UAAU,CAACS,MAAhB,EAAwB;IACtB,MAAM,IAAI9C,KAAJ,CACJ,4FADI,CAAN;EAGD;EAED,IAAM+C,YAAY,GAAG1F,KAAK,CAAC2F,WAAN,CAClB,UAAAnB,KAAD;IAAA,OAAWA,KAAK,CAACrC,IAAN,KAAeqB,SAAf,IAA4BgB,KAAK,CAACrC,IAAN,KAAeyC,MAAM,CAACzC,IAD1C;EAAA,GAEnB,CAACyC,MAAM,CAACzC,IAAR,CAFmB,CAArB;EAKA,IAAMyD,kBAAkB,GAAG5F,KAAK,CAAC2F,WAAN,CACxB,UAAAnB,KAAD;IAAA,OACEA,KAAK,KAAKhB,SAAV,IAAuBgB,KAAK,CAACqB,KAAN,KAAgB,KAAvC,IAAgDH,YAAY,CAAClB,KAAD,CAFrC;EAAA,GAGzB,CAACkB,YAAD,CAHyB,CAA3B;EAMA,IAAAI,iBAAA,GAOI9F,KAAK,CAAC+D,UAAN,CAAiBzD,sBAAjB,CAPJ;IACSyF,YADH,GAAAD,iBAAA,CACJtB,KAAK;IACKwB,eAFN,GAAAF,iBAAA,CAEJG,QAAQ;IACEC,eAHN,GAAAJ,iBAAA,CAGJK,QAAQ;IACRC,MAJI,GAAAN,iBAAA,CAIJM,MAJI;IAKJC,MALI,GAAAP,iBAAA,CAKJO,MALI;IAMJC,YAAA,GAAAR,iBAAA,CAAAQ,YAAA;EAGF,IAAMC,cAAc,GAAGvG,KAAK,CAACqE,MAAN,CAAa,KAAb,CAAvB;EAEA,IAAMmC,YAAY,GAAGxG,KAAK,CAAC2F,WAAN,CAAkB,YAAM;IAC3CO,eAAe,CAAC1C,SAAD,CAAf;IACA+C,cAAc,CAAC1B,OAAf,GAAyB,IAAzB;EACD,CAHoB,EAGlB,CAACqB,eAAD,CAHkB,CAArB;EAKA,IAAMC,QAAQ,GAAGnG,KAAK,CAAC2F,WAAN,CACd,UAAAnB,KAAD,EAAwE;IACtE,IAAI+B,cAAc,CAAC1B,OAAnB,EAA4B;MAI1B;IACD;IACDqB,eAAe,CAAC1B,KAAD,CAAf;EACD,CATc,EAUf,CAAC0B,eAAD,CAVe,CAAjB;EAaA,IAAAO,cAAA,GAAuDzG,KAAK,CAAC0G,OAAN,CAAc,YAAM;MAAA,IAAAC,cAAA;MACzE,IAAMC,qBAAqB,GAAG5B,UAAU,CAACnD,MAAX,CAE5B,UAACC,GAAD,EAAMqD,IAAN,EAAe;QAAA,IAAA0B,aAAA,EAAAC,cAAA,EAAAC,cAAA;QACf,IAAQ3B,aAAA,GAAkBL,OAAO,CAACI,IAAD,CAAP,CAAc,CAAd,CAA1B,CAAQC,aAAA;QACR,IAAM4B,uBAAuB,GAC3B,CAAAlD,KAAK,SAAL,IAAAA,KAAK,WAAL,aAAA+C,aAAA,GAAA/C,KAAK,CAAES,MAAP,cAAAsC,aAAA,uBAAAA,aAAA,CAAerC,KAAf,KAAwB,IAAxB,IACA,CAAAV,KAAK,SAAL,IAAAA,KAAK,WAAL,aAAAgD,cAAA,GAAAhD,KAAK,CAAES,MAAP,cAAAuC,cAAA,uBAAAA,cAAA,CAAerC,OAAf,MAA2B,KAD3B,IAEA,CAAAX,KAAK,SAAL,IAAAA,KAAK,WAAL,aAAAiD,cAAA,GAAAjD,KAAK,CAAES,MAAP,cAAAwC,cAAA,uBAAAA,cAAA,CAAerC,MAAf,MAA0BS,IAF1B,GAGIrB,KAAK,CAACS,MAAN,CAAaA,MAHjB,GAIIf,SALN;QAOA1B,GAAG,CAACqD,IAAD,CAAH,GACEC,aAAa,KAAK5B,SAAlB,IAA+BwD,uBAAuB,KAAKxD,SAA3D,GAAAc,aAAA,CAAAA,aAAA,KAESc,aADL,GAEK4B,uBAAA,IAELxD,SANN;QAQA,OAAO1B,GAAP;MACD,CApB6B,EAoB3B,EApB2B,CAA9B;MA0BA,IACE,CAACiE,YAAY,KAAKvC,SAAjB,IAA8B,CAACkC,YAAY,CAACK,YAAD,CAA5C,KACA,CAAAjC,KAAK,SAAL,IAAAA,KAAK,WAAL,aAAA6C,cAAA,GAAA7C,KAAK,CAAES,MAAP,cAAAoC,cAAA,uBAAAA,cAAA,CAAenC,KAAf,KAAwB,IAF1B,EAGE;QACA,OAAO,CACLI,MAAM,CAACqC,eAAP,CAAuB;UACrBjC,UADqB,EACrBA,UADqB;UAErBE,cAAc,EAAE0B,qBAFK;UAGrBvB,cAAA,EAAAA;QAHqB,CAAvB,CADK,EAML,IANK,CAAP;MAQD,CAZD,MAYO;QAAA,IAAA6B,mBAAA,EAAAC,cAAA;QACL,OAAO,CACLvC,MAAM,CAACwC,kBAAP,EAAAF,mBAAA,GACEpD,KADF,aACEA,KADF,wBAAAqD,cAAA,GACErD,KAAK,CAAES,MADT,cAAA4C,cAAA,uBACEA,cAAA,CAAe3C,KADjB,cAAA0C,mBAAA,cAAAA,mBAAA,GAC2BnB,YAD3B,EAEE;UACEf,UADF,EACEA,UADF;UAEEE,cAAc,EAAE0B,qBAFlB;UAGEvB,cAAA,EAAAA;QAHF,CAFF,CADK,EASL,KATK,CAAP;MAWD;IAOF,CA1DsD,EA0DpD,CAACU,YAAD,EAAenB,MAAf,EAAuBc,YAAvB,CA1DoD,CAAvD;IAAA2B,eAAA,GAAAC,cAAA,CAAAb,cAAA;IAAOc,gBAAD,GAAAF,eAAA;IAAmBG,0BAAnB,GAAAH,eAAA;EA4DN,IAAI7C,KAAK,GAIPoB,kBAAkB,CAACG,YAAD,CAAlB,GACKA,YADL,GAEKwB,gBANP;EAQA,IAAIE,SAAgB,GAAGjD,KAAvB;EAEA,IAAI,CAACrE,YAAY,CAACqE,KAAK,CAACQ,UAAP,EAAmBA,UAAnB,CAAjB,EAAiD;IAE/CyC,SAAS,GAAG7C,MAAM,CAAC8C,2BAAP,CAAmClD,KAAnC,EAA0C;MACpDQ,UADoD,EACpDA,UADoD;MAEpDE,cAFoD,EAEpDA,cAFoD;MAGpDG,cAAA,EAAAA;IAHoD,CAA1C,CAAZ;EAKD;EAED,IAAMsC,uBAAuB,GAAG3H,KAAK,CAACqE,MAAN,CAAaP,KAAb,aAAaA,KAAb,uBAAaA,KAAK,CAAES,MAApB,CAAhC;EAEAvE,KAAK,CAAC4H,SAAN,CAAgB,YAAM;IACpBD,uBAAuB,CAAC9C,OAAxB,GAAkCf,KAAlC,aAAkCA,KAAlC,uBAAkCA,KAAK,CAAES,MAAzC;EACD,CAFD,EAEG,CAACT,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAES,MAAR,CAFH;EAIA,IAAIT,KAAJ,aAAIA,KAAJ,eAAIA,KAAK,CAAES,MAAX,EAAmB;IACjB,IAAMsD,cAAc,GAAGF,uBAAuB,CAAC9C,OAA/C;IAEA,IAAIiD,MAAJ;IAEA,IACE,OAAOhE,KAAK,CAACS,MAAN,CAAaC,KAApB,KAA8B,QAA9B,IACAV,KAAK,CAACS,MAAN,CAAaC,KAAb,IAAsB,IADtB,IAEAV,KAAK,CAACS,MAAN,KAAiBsD,cAHnB,EAIE;MAEAC,MAAM,GAAG/H,aAAa,CAACgI,KAAd,CAAoBjE,KAAK,CAACS,MAAN,CAAaC,KAAjC,CAAT;IACD,CAPD,MAOO,IACL,OAAOV,KAAK,CAACS,MAAN,CAAaG,MAApB,KAA+B,QAA/B,KACEZ,KAAK,CAACS,MAAN,CAAaE,OAAb,KAAyB,KAAzB,IAAkC+C,0BAAnC,IACC1D,KAAK,CAACS,MAAN,KAAiBsD,cAFnB,CADK,EAIL;MAEAC,MAAM,GAAG/H,aAAa,CAACiI,QAAd,CAAuB;QAC9BpF,IAAI,EAAEkB,KAAK,CAACS,MAAN,CAAaG,MADW;QAE9BH,MAAM,EAAET,KAAK,CAACS,MAAN,CAAaA,MAFS;QAG9B0D,IAAI,EAAEnE,KAAK,CAACS,MAAN,CAAa0D;MAHW,CAAvB,CAAT;IAKD;IAGD,IAAMC,YAAY,GAAGJ,MAAM,GACvBlD,MAAM,CAACuD,iBAAP,CAAyBV,SAAzB,EAAoCK,MAApC,EAA4C;MAC1C9C,UAD0C,EAC1CA,UAD0C;MAE1CE,cAF0C,EAE1CA,cAF0C;MAG1CG,cAAA,EAAAA;IAH0C,CAA5C,CADuB,GAMvB,IANJ;IAQAoC,SAAS,GACPS,YAAY,KAAK,IAAjB,GACItD,MAAM,CAACwC,kBAAP,CAA0Bc,YAA1B,EAAwC;MACtClD,UADsC,EACtCA,UADsC;MAEtCE,cAFsC,EAEtCA,cAFsC;MAGtCG,cAAA,EAAAA;IAHsC,CAAxC,CADJ,GAMIoC,SAPN;EAQD;EAED,IAAMW,YAAY,GAAG5D,KAAK,KAAKiD,SAA/B;EAEAnG,iBAAiB,CAAC,YAAM;IACtB,IAAI8G,YAAJ,EAAkB;MAEhBjC,QAAQ,CAACsB,SAAD,CAAR;IACD;EACF,CALgB,CAAjB;EAUAjD,KAAK,GAAGiD,SAAR;EAEAzH,KAAK,CAAC4H,SAAN,CAAgB,YAAM;IACpBxB,MAAM,CAACvC,YAAD,CAAN;IAEA,IAAI,CAACyC,YAAY,EAAjB,EAAqB;MAInBH,QAAQ,CAACsB,SAAD,CAAR;IACD;IAED,OAAO,YAAM;MAKXY,UAAU,CAAC,YAAM;QACf,IAAIrC,eAAe,OAAOxC,SAAtB,IAAmC6C,MAAM,OAAOxC,YAApD,EAAkE;UAChE2C,YAAY;QACb;MACF,CAJS,EAIP,CAJO,CAAV;IAKD,CAVD;EAYD,CAtBD,EAsBG,EAtBH;EA2BA,IAAM8B,mBAAmB,GAAGtI,KAAK,CAACqE,MAAN,EAA5B;EACAiE,mBAAmB,CAACzD,OAApB,GAA8B0C,gBAA9B;EAEA,IAAMtB,QAAQ,GAAGjG,KAAK,CAAC2F,WAAN,CAAkB,YAAa;IAC9C,IAAMI,YAAY,GAAGC,eAAe,EAApC;IAEA,OAAOJ,kBAAkB,CAACG,YAAD,CAAlB,GACFA,YADE,GAEFuC,mBAAmB,CAACzD,OAFzB;EAGD,CANgB,EAMd,CAACmB,eAAD,EAAkBJ,kBAAlB,CANc,CAAjB;EAQA,IAAM2C,OAAO,GAAG1H,eAAe,CAAuB,UAAA2H,CAAD,EAAO;IAAA,IAAAC,IAAA;IAC1D,IAAIzD,UAAU,GAAG,EAAjB;IAEA,IAAIlB,KAAJ;IAEA,IAAI0E,CAAC,CAACE,MAAN,EAAc;MAAA,IAAAC,MAAA;MACZ7E,KAAK,GAAGU,KAAK,CAACoE,MAAN,CAAaC,IAAb,CAAmB,UAAA/E,KAAD;QAAA,OAAWA,KAAK,CAACgF,GAAN,KAAcN,CAAC,CAACE,MAA7C;MAAA,EAAR;MAEA,KAAAC,MAAA,GAAI7E,KAAJ,cAAA6E,MAAA,eAAIA,MAAA,CAAO/F,IAAX,EAAiB;QACfoC,UAAU,CAAC5C,IAAX,CAAgB0B,KAAK,CAAClB,IAAtB;MACD;IACF,CAND,MAMO;MACLkB,KAAK,GAAGU,KAAK,CAACoE,MAAN,CAAapE,KAAK,CAACuE,KAAnB,CAAR;MACA/D,UAAU,CAAC5C,IAAX,CAAAG,KAAA,CAAAyC,UAAU,EAAAxC,kBAAA,CACLwG,MAAM,CAACC,IAAP,CAAYlE,OAAZ,EAAqBmE,MAArB,CAA6B,UAAAtG,IAAD;QAAA,IAAAuG,OAAA;QAAA,OAAU,EAAAA,OAAA,GAAArF,KAAK,UAAL,IAAAqF,OAAA,uBAAAA,OAAA,CAAOvG,IAAP,MAAgBA,IAA1B;MAAA,CAA5B,CADL;IAGD;IAED,IAAIkB,KAAK,IAAI,IAAb,EAAmB;MACjB;IACD;IAED,IAAMsF,UAAU,GAAGC,WAAW,CAACvF,KAAK,CAACgF,GAAP,CAAX,CAAuBM,UAA1C;IAEA,IAAME,SAAS,GAAI,CAAAb,IAAA,KAAD,EACfhG,MADe,CAAAF,KAAA,CAAAkG,IAAA,EAAAjG,kBAAA,CAGX,CACDwB,eADC,EAAAvB,MAAA,CAAAD,kBAAA,CAEEwC,UAAU,CAACC,GAAX,CAAgB,UAAArC,IAAD,EAAU;MAC1B,IAAQ0G,SAAA,GAAcvE,OAAO,CAACnC,IAAD,CAAP,CAAc,CAAd,CAAtB,CAAQ0G,SAAA;MACR,OAAOA,SAAP;IACD,CAHE,CAFF,GAMDrE,GANC,CAMI,UAAAqE,SAAD,EAAe;MACnB,IAAMrE,GAAG,GACP,OAAOqE,SAAP,KAAqB,UAArB,GACIA,SAAS,CAAC;QAAExF,KAAK,EAAEA,KAAT;QAAuBsF,UAAA,EAAAA;MAAvB,CAAD,CADb,GAEIE,SAHN;MAKA,OAAOrE,GAAG,GACN+D,MAAM,CAACC,IAAP,CAAYhE,GAAZ,EACGiE,MADH,CACW,UAAA/G,IAAD;QAAA,OAAUA,IAAI,KAAKqG,CAAC,CAACrG,IAD/B;MAAA,GAEG8C,GAFH,CAEQ,UAAA9C,IAAD;QAAA,OAAU8C,GAAV,aAAUA,GAAV,uBAAUA,GAAG,CAAG9C,IAAH,CAFpB;MAAA,EADM,GAINqB,SAJJ;IAKD,CAjBE,CAHW,GAwBf0F,MAxBe,CAwBR,UAACK,EAAD,EAAKC,CAAL,EAAQC,IAAR;MAAA,OAAiBF,EAAE,IAAIE,IAAI,CAACC,WAAL,CAAiBH,EAAjB,MAAyBC,CAxBxC;IAAA,EAAlB;IA0BAF,SAAS,CAACnG,OAAV,CAAmB,UAAAwG,QAAD;MAAA,OAAcA,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAGnB,CAAH,CAAxC;IAAA;EACD,CAnD8B,CAA/B;EAqDAzH,cAAc,CAAC;IAAEyD,KAAF,EAAEA,KAAF;IAAS+D,OAAA,EAAAA;EAAT,CAAD,CAAd;EAEAvI,KAAK,CAAC4H,SAAN,CAAgB,YAAM;IACpBW,OAAO,CAACqB,IAAR,CAAa;MAAEzH,IAAI,EAAE,OAAR;MAAiB0H,IAAI,EAAE;QAAErF,KAAA,EAAAA;MAAF;IAAvB,CAAb;EACD,CAFD,EAEG,CAAC+D,OAAD,EAAU/D,KAAV,CAFH;EAIA,IAAAsF,kBAAA,GAAmDrJ,iBAAiB,EAApE;IAAmBsJ,cAAb,GAAAD,kBAAA,CAAER,SAAS;IAAkBU,WAAA,GAAAF,kBAAA,CAAAE,WAAA;EAEnC,IAAAC,qBAAA,GAA6CjJ,sBAAsB,EAAnE;IAAQkJ,cAAF,GAAAD,qBAAA,CAAEC,cAAF;IAAkBC,gBAAA,GAAAF,qBAAA,CAAAE,gBAAA;EAExB,IAAMC,QAAQ,GAAGlJ,WAAW,CAAC;IAC3B0D,MAD2B,EAC3BA,MAD2B;IAE3BqB,QAF2B,EAE3BA,QAF2B;IAG3BE,QAH2B,EAG3BA,QAH2B;IAI3B2C,GAAG,EAAEhF,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEgF,GAJe;IAK3BuB,eAAe,EAAEN,cAAc,CAACjC,MALL;IAM3BwC,qBAAqB,EAAEJ,cAAc,CAACK,YANX;IAO3BC,mBAAmB,EAAE;MACnBxF,UADmB,EACnBA,UADmB;MAEnBE,cAFmB,EAEnBA,cAFmB;MAGnBG,cAAA,EAAAA;IAHmB,CAPM;IAY3BkD,OAAA,EAAAA;EAZ2B,CAAD,CAA5B;EAeA,IAAMkC,YAAY,GAAGrJ,eAAe,CAAC;IACnCwD,MADmC,EACnCA,MADmC;IAEnCkE,GAAG,EAAEhF,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEgF,GAFuB;IAGnC7C,QAHmC,EAGnCA,QAHmC;IAInCE,QAAA,EAAAA;EAJmC,CAAD,CAApC;EAOA,IAAMiD,UAAU,GAAGnI,oBAAoB,CAKrC;IACAmJ,QADA,EACAA,QADA;IAEAnE,QAFA,EAEAA,QAFA;IAGAsC,OAHA,EAGAA,OAHA;IAIA3D,MAAA,EAAAA;EAJA,CALqC,CAAvC;EAYA9D,kCAAkC,CAAC;IACjCsI,UADiC,EACjCA,UADiC;IAEjCsB,gBAAgB,EAAEX,cAAc,CAACY;EAFA,CAAD,CAAlC;EAKAxJ,aAAa,CAAC;IACZ8E,QADY,EACZA,QADY;IAEZ2E,iBAAiB,EAAEV,cAAc,CAACjE;EAFtB,CAAD,CAAb;EAKA,IAAMoD,WAAW,GAAGzI,cAAc,CAKhC;IACA4D,KADA,EACAA,KADA;IAEAO,OAFA,EAEAA,OAFA;IAGAqE,UAHA,EAGAA,UAHA;IAIA1G,aAAa,EAAEjB,OAAO,CAACiB,aAJvB;IAKAmI,oBAAoB,EAAEpJ,OAAO,CAACoJ,oBAL9B;IAMAT,QANA,EAMAA,QANA;IAOAnE,QAPA,EAOAA,QAPA;IAQAE,QARA,EAQAA,QARA;IASAsE,YATA,EASAA,YATA;IAUAT,WAVA,EAUAA,WAVA;IAWAG,gBAXA,EAWAA,gBAXA;IAYAvF,MAZA,EAYAA,MAZA;IAcA2D,OAAA,EAAAA;EAdA,CALgC,CAAlC;EAsBA5H,gBAAgB,CAAC;IACf6D,KADe,EACfA,KADe;IAEf4E,UAFe,EAEfA,UAFe;IAGfC,WAAA,EAAAA;EAHe,CAAD,CAAhB;EAMA,IAAMyB,iBAAiB,GAAGpK,YAAY,CAACN,wBAAwB,CAAC2K,QAA1B,EAAoC;IACxEC,KAAK,EAAE5B;EADiE,CAApC,CAAtC;EAIA,OAAO;IACL5E,KADK,EACLA,KADK;IAEL4E,UAFK,EAELA,UAFK;IAGLC,WAHK,EAGLA,WAHK;IAILyB,iBAAA,EAAAA;EAJK,CAAP;AAMD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}