{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\peterfile\\\\Qr-code-reader-react-native-expo-\\\\screens\\\\Scanner.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nexport default function Scanner() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    hasPermission = _useState2[0],\n    setHasPermission = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    scanned = _useState4[0],\n    setScanned = _useState4[1];\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n      data = _ref.data;\n    setScanned(true);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 19\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","Text","View","StyleSheet","Button","BarCodeScanner","Scanner","_useState","_useState2","_slicedToArray","hasPermission","setHasPermission","_useState3","_useState4","scanned","setScanned","_callee","_await$BarCodeScanner","status","_regeneratorRuntime","async","_callee$","_context","prev","next","awrap","requestPermissionsAsync","sent","stop","Promise","handleBarCodeScanned","_ref","type","data","alert","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","styles","container","onBarCodeScanned","undefined","absoluteFillObject","title","onPress","create","flex","flexDirection","justifyContent"],"sources":["C:/Users/hp/Desktop/peterfile/Qr-code-reader-react-native-expo-/screens/Scanner.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Text, View, StyleSheet, Button } from 'react-native';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\n\r\nexport default function Scanner() {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n  const handleBarCodeScanned = ({ type, data }) => {\r\n    setScanned(true);\r\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\r\n  };\r\n\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permission</Text>;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n        style={StyleSheet.absoluteFillObject}\r\n      />\r\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n  },\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}